/// lets remove all drawing functions , leftover UI
Map.clear();
Map.setControlVisibility({
  fullscreenControl:false,
  drawingToolsControl: false,
  mapTypeControl:false
  
})

//     FUNCTION TO LOAD VARIOUS LOCATIONS      //

function prepare_location(){
  var location_selected = choose_location_selector.getValue()
  var viz = "";
  var image = {};

  
  if (location_selected == "Nyandarua"){
    image = ee.Image(locations.nyandarua.image_tag)
    Map.setCenter(locations.nyandarua.long,locations.nyandarua.lat, locations.nyandarua.zoom)
    viz = {bands:['B4','B3','B2'], min:5522, max:12892}
  }
  
  else if (location_selected == "Nyeri"){
    image = ee.Image(locations.nyeri.image_tag)
    Map.setCenter(locations.nyeri.long,locations.nyeri.lat, locations.nyeri.zoom)
    viz = {bands:['B4','B3','B2'], min:5522, max:12892}
  }
  
  else if (location_selected == "Murang'a"){
    image = ee.Image(locations.muranga.image_tag)
    Map.setCenter(locations.muranga.long,locations.muranga.lat, locations.muranga.zoom)
    viz = {bands:['B4','B3','B2'], min:5522, max:12892}
  }
  
  
   else if (location_selected == "Kiambu"){
    image = ee.Image(locations.kiambu.image_tag)
    Map.setCenter(locations.kiambu.long,locations.kiambu.lat, locations.kiambu.zoom)
    viz = {bands:['B4','B3','B2'], min:5522, max:12000}
  }
  
   else if (location_selected == "Nairobi"){
    image = ee.Image(locations.nairobi.image_tag)
    Map.setCenter(locations.nairobi.long,locations.nairobi.lat, locations.nairobi.zoom)
    viz = {bands:['B4','B3','B2'], min:5522, max:23027}
  }
  
   else if (location_selected == "Kirinyaga"){
    image = ee.Image(locations.kirinyaga.image_tag)
    Map.setCenter(locations.kirinyaga.long,locations.nyandarua.lat, locations.kirinyaga.zoom)
    viz = {bands:['B4','B3','B2'], min:5522, max:40764}
  }
  
  
//     FUNCTION TO REMOE PREVIOUS LAYERS    //
  // Function to remove previous layers 
  var removepreviouslayer = function(name) {
    var layers = Map.layers();
    var names = [];
    layers.forEach(function(lay){
      var lay_name = lay.getName();
      names.push(lay_name)
    var length = names.length;
    if (length > 0) {
      var layer_to_remove = layers.get(0);
      Map.remove(layer_to_remove);
      }
    try {
      if (length > 0) {
        var second_to_remove = layers.get(0);
        Map.remove(second_to_remove);
      }
    }
    catch (err){
      print("No second layer")
    }
    })
    }
  removepreviouslayer() // Call the remove previous layer function
  // Add Layer
  Map.addLayer(image, imageVisParam, "Base RGB Image")
}



// Function to handle select box change and to load calculation text box
function insert_equation(){
  var select_value = indices_selector.getValue()
  print(select_value)
  
  if (select_value == "Normalized Difference Vegetation Index (NDVI)"){
    band_math_calc.setValue("(NIR - RED) / (NIR + RED)")
  }
  
  else if (select_value == "Normalized Difference Moisture Index (NDMI)"){
    band_math_calc.setValue("(NIR - SWIR1) / (NIR + SWIR1)")
  }
  else if (select_value == "Soil Adjusted Vegetation Index (SAVI)"){
    band_math_calc.setValue("((NIR - RED) / (NIR + RED + 0.5)) * (1.5)")
  }
  else if (select_value == "Enhanced Vegetation Index (EVI)"){
    band_math_calc.setValue("2.5 * ((NIR - RED) / (NIR + 6 * RED - 7.5 * BLUE + 1))")
  }
  else if (select_value == "Soil Composition Index (SCI)"){
    band_math_calc.setValue("(SWIR1-NIR)/(SWIR1 + NIR)")
  }
  else if (select_value == "Chlorophyll Index Green (CIG)"){
    band_math_calc.setValue("(NIR/GREEN) - 1")
  }
  else if (select_value == "Wide Dynamic Range Vegetation Index (WDRVI)"){
    band_math_calc.setValue("((0.1*NIR) - RED) / ((0.1*NIR) + RED)")
  }
  else if (select_value == "Soil Background Line (SBL)"){
    band_math_calc.setValue("NIR - (2.4*RED)")
  }
  else if (select_value == "Modified Soil Adjusted Vegetation Index (MSAVI)"){
    band_math_calc.setValue("((2*NIR + 1) - sqrt((2*NIR+1)*2 - 8(NIR - RED))) / 2")
  }
  else if (select_value == "Built Up Index (BU)"){
    band_math_calc.setValue("(SWIR1 - NIR) / (SWIR1 + NIR) - ((NIR - RED) / (NIR + RED))")
  }
  else if (select_value == "Normalized Difference Water Index (NDWI)"){
    band_math_calc.setValue("(NIR - SWIR1) / (NIR + SWIR1)")
  }
  else if (select_value == "Normalized Difference Snow Index (NDSI)"){
    band_math_calc.setValue("(GREEN - SWIR1) / (GREEN + SWIR1)")
  }
}



//     FUNCTION TO PERFORM THE BAND MATH
function do_math(){
    var layers = Map.layers()
  var image_collection = layers.get(0).getEeObject();
  print(image_collection)
  
  
  var expression_value = band_math_calc.getValue()
  var calculation = image_collection.expression(
    expression_value, { // Create dictionary of bands for ease of use
          "COAST": image_collection.select("B1"), 
          "BLUE": image_collection.select("B2"),
          "GREEN": image_collection.select("B3"),
          "RED": image_collection.select("B4"),
          "NIR": image_collection.select("B5"),
          "SWIR1": image_collection.select("B6"),
          "SWIR2": image_collection.select("B7"),
          "PAN": image_collection.select("B8"),
          "CIR": image_collection.select("B9"),
          "TIRS1": image_collection.select("B10"),
          "TIRS2": image_collection.select("B11")

    });

    // Grab geometry for region reduction
    var geo = image_collection.geometry()

    // Calculate STD and Mean of index calculated and rename the keys to be used in viz
    var meanStdDev = calculation.reduceRegion({
            reducer: ee.Reducer.mean().combine({reducer2:ee.Reducer.stdDev(), outputPrefix: null, sharedInputs: true}), geometry: geo, scale: 30, bestEffort: true});
    meanStdDev = meanStdDev.rename(meanStdDev.keys(), ['mean1','stdDev1'])
  
  
    // Function to create min and max params  
    meanStdDev.evaluate(function(val){
    var color_choice = change_colors.getValue().split(" ") // Turn into list for palette
    print(color_choice)
      var viz = {
          min: val.mean1 - (val.stdDev1 * 3),
          max: val.mean1 + (val.stdDev1 * 3),
          palette: color_choice
      };
      
      print("viz", viz)


      // Function to grab current layers and input them into a list and then delete the old layer
      var removepreviouslayer = function(name) {
        var layers = Map.layers();
        var names = [];
        layers.forEach(function(lay){
          var lay_name = lay.getName();
          names.push(lay_name)
        var length = names.length;
        if (length > 1) {
          var layer_to_remove = layers.get(1);
          Map.remove(layer_to_remove);
          }
        })
       //removelayer end  
       }



     removepreviouslayer() // Call the remove previous layer function
       if (indices_selector.getValue() == "Enhanced Vegetation Index (EVI)"){
        viz = {palette: change_colors.getValue().split(" "), min: -1, max: 1};
      }
      // Add layer to map
      Map.addLayer(calculation, viz, "Band Math Result");
    });
}



//////   LETS NOW DEFINE THE LOCATIONS

var locations = {
  nyandarua: {
    zoom: 10,
    long: 36.5230,
    lat: 0.1804,
    geometry: ee.Geometry.Point([36.5230, 0.1804]),
    image_tag: "LANDSAT/LC08/C02/T1/LC08_168060_20200830"

    },
  
  kiambu:{
    zoom: 10,
    long: 36.8304,
    lat: -1.1748,
    
    geometry: ee.Geometry.Point([36.8304, -1.1748]),

    image_tag: "LANDSAT/LC08/C02/T1/LC08_168061_20200830"

    },
    
  muranga:{
    zoom: 10,
    long: 37.1607,
    lat: -0.7237,
     geometry: ee.Geometry.Point([37.1607, -0.7237]),

    image_tag: "LANDSAT/LC08/C02/T1/LC08_168060_20200830"

  },
  
  nairobi:{
    zoom:10,
    long:36.8219,
    lat:-1.2921,
    geometry: ee.Geometry.Point([36.8219, -1.2921]),
    image_tag: "LANDSAT/LC08/C02/T1/LC08_168061_20200830"
  },
  
  kirinyaga:{
    zoom:10,
    long:37.3827,
    lat:-0.6591,
    geometry: ee.Geometry.Point([37.3827, -0.6591]),
    image_tag: "LANDSAT/LC08/C02/T1/LC08_168060_20200830"

  },
  nyeri:{
    zoom:10,
    long:36.9580,
    lat:-0.4371,
    geometry: ee.Geometry.Point([36.9580, -0.4371]),
    image_tag: "LANDSAT/LC08/C02/T1/LC08_168060_20200830"
  },
  
}

function maskClouds(image) {
  
    var cloudShadowBitMask = ee.Number(2).pow(3).int();
    var cloudsBitMask = ee.Number(2).pow(5).int();  
    
    var qa = image.select('pixel_qa');
    
    var mask = qa.bitwiseAnd(cloudShadowBitMask).eq(0)
    .and(qa.bitwiseAnd(cloudsBitMask).eq(0)); 
    
  return image.updateMask(mask).divide(10000).copyProperties(image, ["system:time_start"]);
}


var image_collection = ee.ImageCollection("LANDSAT/LC08/C02/T1")
.filterBounds(locations.nyeri.geometry)
.filterDate("2014-01-01", "2023-01-01")
.filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 30))
.map(maskClouds);
print('All metadata:', image_collection);


//   lets create the UI Elements
// lets create the side panel for the bands list
var band_panel = ui.Panel({
  layout: ui.Panel.Layout.flow('vertical', true),
  style:{
    height: '360px',
    width: '250px',
    position: "top-right"
  }
})


//lets create the side panel for the controls
var side_panel = ui.Panel({
  layout: ui.Panel.Layout.flow('vertical', true),
  style:{
    height:'90%',
    width: '400px',
    position:"bottom-left"
  }
})

//lets create the title label
var intro_label = ui.Label({
  value: "Landsat 8 Collection 2 Tier 1 Imagery Index Calculator",
  style:{
    stretch:"horizontal",
    fontWeight:"bold"
  }
})


// Brief instructions;

var instructions_label = ui.Label({
  value: "The Landsat 8 Collection 2 Tier 1 Imagery Index Calculator enables users to conduct band mathematics, employing operators like addition (+), subtraction (-), division (/), square root (sqrt), and exponents (**). Utilizing the band codes located at the bottom right of the interface, users can generate customized indices. Should an image fail to appear, it suggests an error within the calculation. This tool serves as a sophisticated resource for generating indices pertinent to the Central Region of Kenya."
})

// OUR LOCATION LABEL SECTION
var choose_location_label = ui.Label({
  value: "Please choose a location"
})

// lets add the location selector section

var choose_location_selector = ui.Select({
  items:["Nyandarua","Nyeri","Kirinyaga","Murang'a","Kiambu","Nairobi"],
  placeholder: "Select a Location"
})


// label for equations
var prompt_equation_label = ui.Label({
  value: " Please Enter a Valid Equation:"
})

//lets define styles for band list
var band_list_styles ={
  fontSize:"12px"
}

// lets now define lables
var band1_label = ui.Label({
  value: "Band 1 - Coastal Aerosoal --> COASTAL AEROSOL",
  style: band_list_styles
})

var band2_label = ui.Label({
  value: "Band 2 - Blue --> BLUE",
  style: band_list_styles
})

var band3_label = ui.Label({
  value: "Band 3 - Green --> GREEN",
  style : band_list_styles
  
})

var band4_label = ui.Label({
  value: "Band 4 - Red -- RED",
  style: band_list_styles
})

var band5_label = ui.Label({
  value: "Band 5 - Near Infrared --> NIR",
  style: band_list_styles
})

var band6_label = ui.Label({
  value: "Band 6 - SWIR1 --> SWIR1",
  style: band_list_styles
})

var band7_label = ui.Label({
  value: "Band 7 - SWIR2 --> SWIR2 ",
  style: band_list_styles
})

var band8_label = ui.Label({
  value: "Band 8 - Panchromatic --> PAN",
  style: band_list_styles
})

var band9_label = ui.Label({
  value: "Band 9 Cirrus --> Cirrus",
  style: band_list_styles
})


var band10_label = ui.Label({
  value:"Band 10 - TIR1 --> TIRS1",
  style: band_list_styles
})

var band11_label = ui.Label({
  value: "Band 11 - TIR2 --> TIRS2",
  style: band_list_styles
})



// LETS ADD THE CALCULATE BUTTON   //
var calculate_button = ui.Button({
  label:"Calculate",
  style:{stretch:"horizontal"}
});

// lets add the math textbox
var band_math_calc = ui.Textbox({
  placeholder: "Enter Band Math Equation",
  style:{stretch:"horizontal"}
})

//indices selector to preload

var preload_label = ui.Label({
  value: "Choose from a list of indices to preload Equations:"
})

// indices selctor to preload
var indices_selector = ui.Select({
  items:["Normalized Difference Vegetation Index (NDVI)", 
          "Normalized Difference Moisture Index (NDMI)", 
          "Soil Adjusted Vegetation Index (SAVI)",
          "Enhanced Vegetation Index (EVI)",
          "Soil Composition Index (SCI)",
          "Chlorophyll Index Green (CIG)",
          "Wide Dynamic Range Vegetation Index (WDRVI)",
          "Soil Background Line (SBL)",
          "Modified Soil Adjusted Vegetation Index (MSAVI)",
          "Built Up Index (BU)",
          "Normalized Difference Water Index (NDWI)",
          "Normalized Difference Snow Index (NDSI)"],
          placeholder:"Select an Index"
})

//label for color palette

var color_label = ui.Label({
  value:"Choose a color palette:"
})

//label for color palettes

var change_colors = ui.Select({
  items: ["Blue White Green", "White Blue Green Orange Red", 
    "Blue White Purple", "Blue White Red", "Green Purple Orange", 
    "Blue White Yellow", "White Orange Green", "Blue Red Green", 
    "White Green", "White Red", "Grey Red", "Grey Green",
    "White Orange Red Pink","Red Yellow Green"],
    value: "Blue White Green"

})

// lets now add the event listeners
// Detect chnages in the index select menu
indices_selector.onChange(insert_equation)

//Detect changes in location selector box
choose_location_selector.onChange(prepare_location)

//logic for band math pull
calculate_button.onClick(do_math)


var mapTitle = ui.Panel({
  style: {
    position: 'top-center',
    padding: '8px 15px'
  }
});
var mapTitle2 = ui.Label({
  value: 'Central Region (in Kenya) Index Calculator',
  style: {
    fontWeight: 'bold',
    fontSize: '20px',
    margin: '0 0 3px 0',
    padding: '0'
    }
});
mapTitle.add(mapTitle2);
Map.add(mapTitle);


// lets now add the UI Elements
Map.add(side_panel);
side_panel.add(intro_label);
side_panel.add(instructions_label);
side_panel.add(choose_location_label);
side_panel.add(choose_location_selector);
side_panel.add(prompt_equation_label);
side_panel.add(band_math_calc);
side_panel.add(calculate_button);
side_panel.add(preload_label);
side_panel.add(indices_selector);
side_panel.add(color_label);
side_panel.add(change_colors);


//lets add the Band Panel UI

Map.add(band_panel);
band_panel.add(band1_label);
band_panel.add(band2_label);
band_panel.add(band3_label);
band_panel.add(band4_label);
band_panel.add(band5_label);
band_panel.add(band6_label);
band_panel.add(band7_label);
band_panel.add(band8_label);
band_panel.add(band9_label);
band_panel.add(band10_label);
band_panel.add(band11_label);
